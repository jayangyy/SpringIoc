<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-3.0.xsd   
        http://www.springframework.org/schema/mvc   
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd   
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<!-- 默认的注解映射的支持 -->
	<mvc:annotation-driven validator="validator"
		conversion-service="conversion-service" />
	<!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!--不设置则默认为classpath下的 ValidationMessages.properties -->
		<property name="validationMessageSource" ref="validatemessageSource" />
	</bean>

	<!-- //aop切入配置 ,这个自动代理配置可以在<context:component-scan中定义要扫描的AOP包,否则会一个个BEAN 
		的配置，但是为了区分AOP可以一个个配置 -->

	<aop:aspectj-autoproxy proxy-target-class="true"  expose-proxy="true"/>
	<!-- <aop:aspectj-autoproxy> <aop:include name="包含你的AOPBEAN 名字 如 AUTH" 可写可不写 
		在下面配置了BEAN 就可以了其实/> </aop:aspectj-autoproxy> -->
	<!-- <bean id="auth" class="com.domain.services.SimpleAspect"> </bean> -->
	<!-- <aop:config proxy-target-class="true"> <aop:aspect id="authAspect" 
		ref="auth"> <aop:pointcut id="authP" expression="execution(* com.domain.services.*Service*.*(..))" 
		/> <aop:around pointcut-ref="authP" method="around" /> </aop:aspect> </aop:config> -->
	<!-- //aop切入配置 -->
	<bean id="conversion-service"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
	<bean id="validatemessageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="/WEB-INF/validatemessages" />
		<property name="fileEncodings" value="utf-8" />
		<property name="cacheSeconds" value="120" />
	</bean>
	<!-- <context:annotationconfig/> -->
	<!-- 如果当前请求为“/”时，则转发到“/helloworld/index” -->
	<mvc:view-controller path="/"
		view-name="forward:/helloworld/index" />
<context:component-scan
		base-package="com.demo.web.controllers,com.ioc.domains,com.domain.services,com.annotation,com.domains,com.transcation.domains,com.cssdriver.domains">
<!-- 		use-default-filters="false"> -->
		<!-- 若需要添加对CONTROLLER的AOP支持需要扫描包 -->		
<!-- 		 <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" /> 
		 		 <context:include-filter type="annotation" expression="org.springframework.stereotype.Service" /> 
		 		 		 <context:include-filter type="annotation" expression="org.springframework.stereotype.Component" /> 
	 <context:include-filter type="annotation" expression="org.springframework.transaction.annotation.Transactional" />  -->
	</context:component-scan>
	<!-- 事务配置 -->
	<!-- 数据库映射 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3307/hiblatetest" />
		<property name="username" value="root" />
		<property name="password" value="Jayang880706" />
	</bean>

	<context:annotation-config />
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- 声明式事务 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource"></property> </bean> -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="WEB-INF/hibernate.cfg.xml" />
	</bean>



	<!-- 静态资源映射 -->
	<mvc:resources mapping="/**" location="/WEB-INF/" />
	<mvc:resources mapping="/**" location="/WEB-INF/themes/" />
	<mvc:resources mapping="/**" location="/WEB-INF/plugins" />
	<mvc:resources mapping="/uploadfy/**" location="/WEB-INF/upload" />
	<mvc:resources mapping="/plugins/**" location="/WEB-INF/plugins/" />
	<mvc:resources mapping="images/**" location="/WEB-INF/images/" />
	<mvc:resources mapping="/**" location="/WEB-INF/uploadfile/image" />
	<!-- 当上面要访问的静态资源不包括在上面的配置中时，则根据此配置来访问 -->
	<mvc:default-servlet-handler />
	<!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求，授权验证拦截 -->
	<mvc:interceptors>
		<!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 -->
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
		<!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求,AOP,拦截器做日志记录，事物控制等可以混用也可以单独使用 -->
		<bean class="com.domains.AuthInterceptor"></bean>
	</mvc:interceptors>
	<!--国际化实现基于SESSION 也可以基于COOKIES 个人觉得采用COOKIES更好，或者基于URL 的国际化 <bean id="localeResolver" 
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver" /> -->
	<!-- 基于URL 国际化请求类似 ？locale=zh_CN 或 locale=en_US <bean id="localeResolver" 
		class="com.domains.MyAcceptHeaderLocaleResolver"/> -->
	<!-- 开启controller注解支持 -->
	<!-- use-default-filters="false" 只扫描指定的注解 -->
	
	<bean id="exceptionResolver" class="com.domains.MyExceptionHandler" />
	<!-- 视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="contentType" value="text/html" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- 支持上传文件 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件的最大尺寸为1MB -->
		<property name="maxUploadSize">
			<value>1048576000</value>
		</property>
		<property name="defaultEncoding">
			<value>UTF-8</value>
		</property>
	</bean>
</beans>
